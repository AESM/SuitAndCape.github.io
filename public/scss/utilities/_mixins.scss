/*_mixins.scss*/

/**** MIXINS
*=======================================================================*/
/*===== BEM selectors =====*/
@mixin e($element) {
  &__#{$element} {
    @content;
  }
}
@mixin m($modifier) {
  &--#{$modifier} {
    @content;
  }
}

/*===== Media queries =====*/
/// Mixin to manage responsive breakpoints
/// @author Hugo Giraudel
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints
@mixin mq($break) {
// If the key exists in the map
  @if $break == "small" {
    // Prints a media query based on the value
    @media (min-width: $brkpoint-sm) and (max-width: $brkpoint-md) {
      @content;
    }
  }
  @else if $break == "medium" {
    @media (min-width: $brkpoint-md + 1) {
      @content;
    }
  }
  @else if $break == "large" {
    @media (min-width: $brkpoint-lg) {
      @content;
    }
  }
  // If the key doesn't exist in the map
   @else {
    @error "Whoops! No value could be retrieved for `#{$break}`. "
  }
}

/*===== Generate modifier color classes =====*/
@mixin bg-colors($map) {
  @each $theme, $color in $map {
    &--#{$theme} {
      background-color: $color;
    }
  }
}

/*===== Generate :before or :after pseudo-element shapes =====*/
@mixin p-el(
  $el,
  $el-w: null,
  $el-h: null) {
  @if $el == "before" or $el == "after" {
    &:#{$el} {
      @extend %pseudos;
      height: $el-h;
      width: $el-w;
      @content;
    }
  }
  @else {
    @error "`#{$el}` is not a valid pseudo-element.";
  }
}

/*===== Background image replacement =====*/
@mixin img-replace($img, $w, $h, $disp: block) {
  background-image: url('#{$path--rel}/#{$img}');
  background-repeat: no-repeat;
  height: $h;
  width: $w;
  display: $disp;
}

/*===== Adjacent sibling margins =====*/
@mixin doubly($margin: 1rem) {
  & + & {
    margin-left: $margin;
    @content;
  }
}

/*===== Grid columns =====*/
@mixin g-columns {
  @for $i from 1 through $g-col-count {
    $context: g-context($g-col-width, $g-col-count ,$g-gutter-width) !global;
    $target: ($g-col-width * $i) + ($g-gutter-width * ($i - 1));

    // Generate column modifier classes
    &--#{$i} {
      width: percentage($target / $context);
    }
  }
}
