/*_mixins.scss*/

/**** MIXINS
*=======================================================================*/
/*===== BEM element selector mixin =====*/
@mixin e($element) {

  &__#{$element} {
    @content;
  }

}

/*===== BEM modifier selector mixin =====*/
@mixin m($modifier) {

  &--#{$modifier} {
    @content;
  }

}

/*===== Media queries =====*/
/// Mixin to manage responsive breakpoints
/// @author Hugo Giraudel
/// @editor Ali Esmaili
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints
@mixin mq($break) {

/*===== If the key exists in the map =====*/
  @if $break == "u-small" {
    /*===== Prints a media query based on the value =====*/
    @media ($spltpnt-sm) and (max-width: $brkpnt-us) {
      @content;
    }

  }

  @else if $break == "x-small" {
    @media (min-width: $brkpnt-us + 1) and (max-width: $brkpnt-xs) {
      @content;
    }

  }

  @else if $break == "small" {
    @media (min-width: $brkpnt-xs + 1) and (max-width: $brkpnt-sm) {
      @content;
    }

  }

  @else if $break == "medium" {
    @media (min-width: $brkpnt-sm + 1) and (max-width: $brkpnt-md) {
      @content;
    }

  }

  @else if $break == "large" {
    @media (min-width: $brkpnt-md + 1) and (max-width: $brkpnt-lg) {
      @content;
    }

  }

  @else if $break == "x-large" {
    @media (min-width: $brkpnt-lg) {
      @content;
    }

  }

  /*===== If the key doesn't exist in the map =====*/
   @else {
    @error "Whoops! No value could be retrieved for \`#{$break}\`."
  }

}

@mixin medq($split) {
  @if $split == "split-sm" {
    @media (min-width: $spltpnt-sm) and (max-width: $spltpnt-md) {
      @content;
    }

  }

  @else if $split == "split-md" {
    @media (min-width: $spltpnt-md + 1) {
      @content;
    }

  }

  @else if $split == "split-lg" {
    @media (min-width: $spltpnt-lg) {
      @content;
    }

  }

}

/*===== Generate modifier color classes =====*/
@mixin bg-colors($map) {

  @each $theme, $color in $map {

    &--#{$theme} {
      background-color: $color;
    }

  }

}


/*===== Generate modifier color-gradient classes =====*/
/// Mixin printing a linear-gradient
/// as well as a plain color fallback
/// @author Chris Eppstein
/// @editor Ali Esmaili
/// and the `-webkit-`, `-moz-`, and `-o-` prefixed declarations
/// @access public
/// @param {String | List | Angle} $direction - Linear gradient direction
/// @param {Arglist} $color-stops - List of color-stops composing the gradient
@mixin linear-gradient($direction, $color-stops...) {

  @if is-direction($direction) == false {
    $color-stops: ($direction, $color-stops);
    $direction: 180deg;
  }

  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops); /* For Safari 5.1 to 6.0 */
  background: -moz-linear-gradient(remove-to($direction), $color-stops); /* For Firefox 3.6 to 15 */
  background: -o-linear-gradient(remove-to($direction), $color-stops); /* For Opera 11.1 to 12.0 */
  background: linear-gradient($direction, $color-stops); /* Standard syntax */
}

/*===== Generate :before or :after pseudo-element shapes =====*/
@mixin p-el($el, $el-w: null, $el-h: null) {

  @if $el == "before" or $el == "after" {

    &:#{$el} {
      @extend %pseudos;
      height: $el-h;
      width: $el-w;
      @content;
    }

  }

  @else {
    @error "\`#{$el}\` is not a valid pseudo-element.";
  }

}

/*===== Background image replacement =====*/
@mixin img-replace($img, $w, $h, $disp: block) {
  background-image: url('#{$path--rel}/#{$img}');
  background-repeat: no-repeat;
  height: $h;
  width: $w;
  display: $disp;
}

/*===== Adjacent sibling margins =====*/
@mixin doubly($margin: 1rem) {

  & + & {
    margin-left: $margin;
    @content;
  }

}

/*===== Grid columns =====*/
@mixin g-columns {

  @for $i from 1 through $g-col-count {
    $context: g-context($g-col-width, $g-col-count ,$g-gutter-width) !global;
    $target: ($g-col-width * $i) + ($g-gutter-width * ($i - 1));

    /*===== Generate column modifier classes =====*/
    &--#{$i} {
      width: percentage($target / $context);
    }

  }

}
