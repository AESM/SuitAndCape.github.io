/*_functions.scss*/

/**** FUNCTIONS
*=======================================================================*/
/*===== Import if Google Fonts URL is defined =====*/
// @if variable-exists(font-url--google) {
//   @import url($font-url--google);
// }

@font-face {
  font-family: 'aleobold';
  src: url('Aleo-Bold-webfont.eot');
  src: url('Aleo-Bold-webfont.eot?#iefix') format('embedded-opentype'),
       url('Aleo-Bold-webfont.woff') format('woff'),
       url('Aleo-Bold-webfont.ttf') format('truetype'),
       url('Aleo-Bold-webfont.svg#aleobold') format('svg');
  font-weight: normal;
  font-style: normal;
}

@font-face {
  font-family: 'aleolight';
  src: url('Aleo-Light-webfont.eot');
  src: url('Aleo-Light-webfont.eot?#iefix') format('embedded-opentype'),
       url('Aleo-Light-webfont.woff') format('woff'),
       url('Aleo-Light-webfont.ttf') format('truetype'),
       url('Aleo-Light-webfont.svg#aleolight') format('svg');
  font-weight: normal;
  font-style: normal;
}

@font-face {
  font-family: 'aleoregular';
  src: url('Aleo-Regular-webfont.eot');
  src: url('Aleo-Regular-webfont.eot?#iefix') format('embedded-opentype'),
       url('Aleo-Regular-webfont.woff') format('woff'),
       url('Aleo-Regular-webfont.ttf') format('truetype'),
       url('Aleo-Regular-webfont.svg#aleoregular') format('svg');
  font-weight: normal;
  font-style: normal;
}



/*===== Converts pixels to rem values =====*/
@function rem($target, $context: $base__font-size) {
  @return ($target / $context) * 1rem;
}

/*===== Call the color palette modifiers in color values =====*/
@function palette($palette, $shade: "base") {
  @return map-get(map-get($color-palettes, $palette), $shade);
}

/*===== Establish the base context width for fluid width of grid =====*/
@function g-context($g-col-width, $g-col-count ,$g-gutter-width) {
  $g-context: ($g-col-width * $g-col-count) + ($g-gutter-width * ($g-col-count - 1));
  @return $g-context;
}

/*===== String replacer =====*/
/// Replace `$search` with `$replace` in `$string`
/// Replaces a substring within another string
/// @author Hugo Giraudel
/// @param {string} $string - Initial string
/// @param {string} $search - Substring to replace
/// @param {string} $replace ('') - New value
/// @return {string} - Updated string
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

/*===== Deep get in maps =====*/
/// Map deep get
/// @author Hugo Giraudel
/// @access public
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Key chain
/// @return {*} - Desired value
@function map-deep-get($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }
    @return $map;
}

/*===== Linear gradient converter =====*/
/// Function to manage convert angle
/// @author Chris Eppstein
/// @editor Ali Esmaili
/// @param {Number} $value - Value to convert
/// @param {String} $unit - Unit to convert to
/// @return {Number} Converted angle
@function convert-angle($value, $unit) {
  $convertable-units: deg grad turn rad;
  $conversion-factors: 1 (10grad/9deg) (1turn/360deg) (3.1415926rad/180deg);
  @if index($convertable-units, unit($value)) and index($convertable-units, $unit) {
    @return $value / nth($conversion-factors, index($convertable-units, unit($value))) * nth($conversion-factors, index($convertable-units, $unit));
  }

  @warn "Cannot convert `#{unit($value)}` to `#{$unit}`.";
}
/// Test if `$value` is an angle
/// @param {*} $value - Value to test
/// @return {Bool}
@function is-direction($value) {
  $is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

  @return $is-direction or $is-angle;
}
/// Convert a direction to legacy syntax
/// @param {Keyword | Angle} $value - Value to convert
/// @require {function} is-direction
/// @require {function} convert-angle
@function legacy-direction($value) {
  @if is-direction($value) == false {
    @warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction";
  }

  $conversion-map: (
    to top          : bottom,
    to top right    : bottom left,
    to right top    : left bottom,
    to right        : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom       : top,
    to bottom left  : top right,
    to left bottom  : right top,
    to left         : right,
    to left top     : right bottom,
    to top left     : bottom right
  );

  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }

  @return 90deg - convert-angle($value, 'deg');

}
/// Remove 'to' from Opera and Mozilla syntax
/// @editor Ali Esmaili
/// @param {Keyword | Angle} $value - Value requiring removal
/// @require {function} is-direction
@function remove-to($value) {
  @if is-direction($value) == false {
    @warn "Cannot remove to from `#{$value}` because it doesn't seem to be a proper direction";
  }

  $remove-to-map: (
    to top          : top,
    to top right    : top right,
    to right top    : right top,
    to right        : right,
    to bottom right : bottom right,
    to right bottom : right bottom,
    to bottom       : bottom,
    to bottom left  : bottom left,
    to left bottom  : left bottom,
    to left         : left,
    to left top     : left top,
    to top left     : top left
  );

  @if map-has-key($remove-to-map, $value) {
    @return map-get($remove-to-map, $value);
  }

  @return ($value);
}